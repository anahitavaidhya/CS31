1. Some notable obstacles were figuring out the logic of subsequence and divide. But I realized that before writing code, I should write out my thinking and logic on a piece of paper and then code afterwards. It helps me fix errors better. 
2. Reduplicate: negative array size (to see if it prints out -1), position > n (to see if it prints out -1), n  = 0 (to see if it prints out -1), and n > 0 (to see if it runs normally as it supposed to by duplicating)
3. Locate: n < 0 (to see if it prints out -1), n = 0 (to see if it prints out -1), matching string (to see if it runs as it is supposed to), unmatching string (to see if it returns the correct number), different case (to make sure the code doesn’t think chRis is the same as chris)
4. Location of Max: position > n (to see if it prints out -1), n  = 0 (to see if it prints out -1), and n > 0 (to see if it prints out -1), beginning of array (to make sure it returns 0), end of array (to make sure it checks all of the elements), middle of array (to make sure it works as supposed to by returning the smallest element)
5. Circle Left: position > n (to see if it prints out -1), n  = 0 (to see if it prints out -1), and n > 0 (to see if it prints out -1), a[0] (to see if it pushes anything), a[middle] (to see how it pushes and prints that to the last), a[end] (to see if it pushes anything)
6. Enumerate Runs: position > n (to see if it prints out -1), n  = 0 (to see if it prints out -1), and n > 0 (to see if it prints out -1), all the same (to check if it returns 1), non-consecutive (to check if it returns 0), normal (check if it returns the correct amount of runs)
7. Flip: position > n (to see if it prints out -1), n  = 0 (to see if it prints out -1), and n > 0 (to see if it prints out -1), small even number (to make sure the for loop works as intended), small odd number (to make sure the for loop works as intended), large even number(to make sure the for loop works as intended), large odd number (to make sure the for loop works as intended)
8. Locate Difference: n1 < n2 (to make sure the for loop doesn’t go out of bounds), n1 > n2 (to make sure the for loop doesn’t go out of bounds), n1 == n2 (to make sure the for loop doesn’t go out of bounds), all the same (to make sure it returns the correct number), all different (to make sure it returns the correct number)
9. Subsequence: n1 < n2 (to make sure the for loop doesn’t go out of bounds), n1 > n2 (to make sure the for loop doesn’t go out of bounds), n1 == n2 (to make sure the for loop doesn’t go out of bounds), all different (to make sure it returns the correct number), all same (to make sure it returns the correct number), normal test (to make sure it returns the correct number)
10. Locate Any: position > n (to see if it prints out -1), n  = 0 (to see if it prints out -1), and n > 0 (to see if it prints out -1), none matching (to make sure it returns the correct number), one matching (to make sure it returns the correct number), two matching (to make sure it returns the correct number)
11. Divide: position > n (to see if it prints out -1), n  = 0 (to see if it prints out -1), and n > 0 (to see if it prints out -1), divide with first element as less than and rest greater than, divide with last element greater than and rest less than, normal test case with divide somewhere near the middle, divide with the same divider string in the array